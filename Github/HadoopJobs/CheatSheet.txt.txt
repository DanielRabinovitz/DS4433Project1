Jobs

1) Find all MyPage rows under one nationality

	hadoop solution:
		CSV: MyPage
		map -> <countrycode, pageID>

	solution: df.loc[df['country code'] = X]

2) Find the 8 pages with the most visitors

	hadoop solution: 
		CSV: AccessLog
		map -> <pageID, 1>
		reduce -> count (return top 8 pages)
		CSV: MyPage
		map -> <pageID, (name, nationality)>

	solution: for loop with individual pageID's			 

3) Count how many users there are per nationality

	hadoop solution:
		CSV: MyPage
		map -> <nationality, 1>
		reduce -> count

	solution: for loop with sum count

4) For each user X, count how many users Y list user X as a friend

	hadoop solution: 
		CSV: Friends
		map -> <recieverID, senderID>
		reduce -> count senderID after eliminating duplicates

	solution: for loop over pageID's to do df.loc[df['myFriend'] = X]
			  eliminate duplicates tally length of each list

5) For each user, how many total times have they access any fB page
	and how many unique pages did they access

	hadoop solution: (potential to use two reduce functions under a single map)
		how many times they have accessed any fB page:
			CSV: AccessLog
			map -> <byWho, 1>
			reduce -> count byWho
		how many unique fB pages they accessed:
			CSV: AccessLog
			map -> <(byWho, whatPage), 1>
			reduce -> count number of buckets
	solution: 
		how many times they have accessed any fB page:
			for loop over pageID's to do df.loc[df['byWho'] = X]
			generate count
		how many unique fB pages they accessed:
			eliminate duplicates from top result
			generate count

6) List all users X who have a friend Y for which X has not accessed
	Y's page ever

	hadoop solution:
		get user friend list:
			CSV: friends
			map -> <personID, myFriend>
			reduce -> eliminate duplicates
		check unique pages that friends accessed
			CSV: AccessLog
			map -> <(byWho, whatPage), whatPage>
			reduce -> from each bucket, retrieve unique pages friends accessed
		last part:
			subtract visited pages from each persons friend list
			for every user, with people in list after subtraction print list
	solution: 
		get user friend list: 
			for loop over pageIDs to do df.loc[df['personID'] = X]
			delete duplicates
		check unique pages friends accessed:
			for loop over pageIDs to do df.loc[df['byWho'] = X]
			delete duplicates
		last part:
			subtract visited pages from each persons friend list
			for every user, with people in list after subtraction print list
			
7) Find all users who, after X days of creating their page have no
	appearances in the accesslog
8) List all users who have more friends than the average number
	of friends
		-Ask if "having more friends" means sent more or recieved 
		 more friend requests
 

Extra notes:
A user X has user Y as a friend if ???